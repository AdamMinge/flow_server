# Generated by Django 3.2.23 on 2023-11-20 14:36

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the organization. This field must be unique and should be kept short and memorable.', max_length=128, verbose_name='name')),
                ('active', models.BooleanField(default=True, help_text='Whether the organization is currently active. This can be used to disable organizations without deleting them.', verbose_name='active')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.CreateModel(
            name='OrganizationAPIKey',
            fields=[
                ('id', models.CharField(editable=False, max_length=150, primary_key=True, serialize=False, unique=True)),
                ('prefix', models.CharField(editable=False, max_length=8, unique=True)),
                ('hashed_key', models.CharField(editable=False, max_length=150)),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('name', models.CharField(default=None, help_text='A free-form name for the API key. Need not be unique. 50 characters max.', max_length=50)),
                ('revoked', models.BooleanField(blank=True, default=False, help_text='If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)')),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Once API key expires, clients cannot use it anymore.', null=True, verbose_name='Expires')),
                ('organization', models.ForeignKey(help_text='The organization that the API key belongs to. This field is a foreign key to the Organization model.', on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to='authentication.organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'Organization API key',
                'verbose_name_plural': 'Organization API keys',
                'ordering': ('-created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for the user. This field is automatically generated and cannot be edited.', primary_key=True, serialize=False, verbose_name='id')),
                ('username', models.CharField(db_index=True, help_text="The user's username. This field must be unique and should be kept short and memorable.", max_length=255, unique=True, verbose_name='username')),
                ('email', models.EmailField(db_index=True, help_text="The user's email address. This field must be unique and is used for login.", max_length=255, unique=True, verbose_name='email')),
                ('is_verified', models.BooleanField(default=False, help_text="Whether the user's email address has been verified. This can be used for email confirmation and account activation workflows.", verbose_name='verified')),
                ('is_active', models.BooleanField(default=True, help_text="Whether the user's account is currently active. This can be used to disable user accounts without deleting them.", verbose_name='activated')),
                ('is_staff', models.BooleanField(default=False, help_text='Whether the user is a member of staff. This can be used to give special permissions to certain users.', verbose_name='staff')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='he date and time when the user account was created.', verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time when the user account was last updated.', verbose_name='updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
